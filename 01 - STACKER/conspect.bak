#lang racket
; (list)
4 ; (list 4)
8 ; (list 8 4)
+ ; (list + 8 4) = (list 12)
3 ; (list 3 + 8 4)
* ; (list * 3 12) = (list 36)

Полнота по Тьюрингу:
1. Четко отпределенный набор типов данных
2. Поддержка ветвлений
3. Поддержка циклов

Domain Specific Languages - DSL

1. А ЗАЧЕМ?
Input -> PL (Black Box) -> Output
Python -> C / Java / Ruby

Stacker -> Racket -> Julia -> C

1. Design
2. Culture
3. Speciation - HTML / Reg

2. КАК ЭТО СДЕЛАТЬ?
  2.1. Дизайн синтаксиса, правил и поведения для языка
  2.2. Написание пррграммы на Racket, которая принимает ввод, обрабатывает, и выдает результаты
       (Перетянуть п.2.1. в синтаксис Racket)
  2.3. Отладить использование проекта.

3. КОМПОНЕНТЫ
  3.1 Reader - конвертирует ваш исходный код и набора строк в S-Expressions (промежуточный код для Racket)
  3.2 Expander - определяет, как промежуточный код будет интерпретирован и запущен.

4. СИНТАКСИС RACKET
  4.1 S-Expression - основной блок 2 "blue" (list 2 "blue" edge) (* 21 2)
  4.2 (4) ("blue") != (* 4 "blue")
  4.3 (define edge 2) (+ 2 2) evaluation = 4
  4.4 (* edge 4) == (* edge (+ 2 2)) == (* edge (+ [+ 1 1] [+ 1 1]))
  4.5 True = #t and False = #f != (null определится как #t) (0 определится как #t)
  4.6 Любые отступы - только для читабельности
  4.7 [] == ()
Lisp - Schema - Racket

5. Reader
У Reader всегда должна быть read-syntax
Input -> Внутрення форма -> Syntax Object -> Форма Экспандера -> Синтаксис Racket

6. Expander
  6.1 Мы опрелеояем макросы, для того чтоб переписать конкретный код в виде другого кода, доступного к компиляции
  6.2 Мы МОЖЕМ определять функции, которые должны быть вызваны при запуске синт. обьекта
  6.3 Мы можем импортировать макросы из существующих модулей, которые содержат их

  Дизайн
  Код, полученный от Reader:
  (handle)
  (handle 4)
  (handle 8)
  (handle +)
  (handle 3)
  (handle *)

  Bindings: 1 - handle, 2 +, 3 *
  Stack: Interface for Storing, Reading, Doing Operations -> handle.
  Special Macro: #%module-begin